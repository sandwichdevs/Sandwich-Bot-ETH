// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-core/contracts/interfaces/IERC20.sol";

contract MEVBot {
    address public owner;
    IUniswapV2Router02 public uniswapRouter;
    IUniswapV2Router02 public sushiswapRouter;

    constructor(address _uniswapRouter, address _sushiswapRouter) {
        owner = msg.sender;
        uniswapRouter = IUniswapV2Router02(_uniswapRouter);
        sushiswapRouter = IUniswapV2Router02(_sushiswapRouter);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    function executeArbitrage(
        address token0,
        address token1,
        uint256 amount0,
        uint256 amount1
    ) external onlyOwner {
        uint256 initialBalanceToken0 = IERC20(token0).balanceOf(address(this));
        uint256 initialBalanceToken1 = IERC20(token1).balanceOf(address(this));

        // Swap token0 for token1 on Uniswap
        IERC20(token0).approve(address(uniswapRouter), amount0);
        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = token1;

        uniswapRouter.swapExactTokensForTokens(
            amount0,
            0, // accept any amount of token1
            path,
            address(this),
            block.timestamp
        );

        // Swap token1 back to token0 on Sushiswap
        uint256 amountReceivedToken1 = IERC20(token1).balanceOf(address(this)) - initialBalanceToken1;
        IERC20(token1).approve(address(sushiswapRouter), amountReceivedToken1);
        path[0] = token1;
        path[1] = token0;

        sushiswapRouter.swapExactTokensForTokens(
            amountReceivedToken1,
            0, // accept any amount of token0
            path,
            address(this),
            block.timestamp
        );

        // Check profit
        uint256 finalBalanceToken0 = IERC20(token0).balanceOf(address(this));
        require(finalBalanceToken0 > initialBalanceToken0, "No profit");

        // Transfer profit to owner
        uint256 profit = finalBalanceToken0 - initialBalanceToken0;
        IERC20(token0).transfer(owner, profit);
    }

    function withdraw(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(owner, amount);
    }

    function deposit(address token, uint256 amount) external onlyOwner {
        IERC20(token).transferFrom(msg.sender, address(this), amount);
    }
}
